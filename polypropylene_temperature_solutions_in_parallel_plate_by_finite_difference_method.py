# -*- coding: utf-8 -*-
"""Polypropylene temperature solutions in parallel-plate by finite difference method.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RiGU8bZgpMSf-5V5TbWl0SsM8OjqtrfP
"""

import numpy as np
import sys
from scipy.optimize import newton
import math
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter

def velocity(y, yc, y_max, tau0, nc, g):
    return (1/(6*g*nc))*(8*tau0**.5*(g*(y-yc)+tau0)**(3/2)-3*g**2*y**2+6*g*(g*yc-2*tau0)*y-8*tau0**.5*(g*(y_max-yc)+tau0)**(3/2)+3*g**2*y_max**2-6*g*(g*yc-2*tau0)*y_max)

# a = Lower Diag, b = Main Diag, c = Upper Diag, d = solution vector
def TDMA(a,b,c,d):
    n = len(d)
    w= np.zeros(n-1,float)
    g= np.zeros(n, float)
    p = np.zeros(n,float)

    w[0] = c[0]/b[0]
    g[0] = d[0]/b[0]

    for i in range(1,n-1):
        w[i] = c[i]/(b[i] - a[i-1]*w[i-1])
    for i in range(1,n):
        g[i] = (d[i] - a[i-1]*g[i-1])/(b[i] - a[i-1]*w[i-1])
    p[n-1] = g[n-1]
    for i in range(n-1,0,-1):
        p[i-1] = g[i-1] - w[i-1]*p[i]
    return p

y_max=0.0019
nc=100.24
TW=433.15
k=0.15
pd=700
cp=1900
dz=0.0001
TI = 403.15
dy=2*0.0001**2
tau0=26260
tw=249470
g=3000000
yc=0.0002
yp=np.arange(yc,y_max+0.0001,0.0001)
yn=np.arange(-y_max,-yc,0.0001)
ryp=np.arange(y_max,yc,-0.0001)
cy=np.arange(-yc-0.0001,yc+0.0001,0.0001)
def cvelocity(y, yc, y_max, tau0, nc, g,tw):
    return (y_max*tw/(2*nc))*((1-(y/y_max)**2)-8/3*(tau0/tw)**.5*(1-(y/y_max)**1.5)+2*(tau0/tw)*(1-y/y_max))

x=[]
for i in range(6):
    x.append(velocity(yc, yc, y_max, tau0, nc, g)) 


plt.plot(yn*1000,velocity(ryp, yc, y_max, tau0, nc, g), 'b')
plt.plot(yp*1000,velocity(yp, yc, y_max, tau0, nc, g), 'b')
#plt.plot(cy,centralvelocity(len(cy)),'r')
plt.plot(cy*1000,x,'r', label = 'core velocity')
plt.xlabel('y (mm)')
plt.ylabel('Velocity (m/s)')
plt.grid()
plt.legend(loc = 'lower center')
plt.show()

y_max=0.0019
nc=100.24
TW=433.15
k=0.15
pd=700
cp=1900
dz=0.0001
dy=2*0.0001**2
tau0=26260

def temp(y_max,g,TW,nc,k,pd,cp,dz,dy,tau0,yc,z):
  T=[TW]
  T1 = []
  for i in range(37):
      T.append(403.15)
  T.append(TW)
  #s=T[19]
  for j in range(z):
      a=[]
      b=[]
      c=[]
      d=[]
      for i in range(18,-19,-1):
          y=np.float(i)/10000
          if y==0.0018:   
              b.append(pd*cp*velocity(abs(y), yc, y_max, tau0, nc, g)/(dz)+2*k/dy)
              d.append(2*k/dy*T[18-i]+(pd*cp*(velocity(abs(y), yc, y_max, tau0, nc, g))/dz-2*k/dy)*T[19-i]+k/dy*T[20-i]+((tau0**.5+nc**.5*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001)**.5)**2)*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001))
          elif y==-0.0018:
              b.append(pd*cp*velocity(abs(y), yc, y_max, tau0, nc, g)/(dz)+2*k/dy)
              d.append(k/dy*T[18-i]+(pd*cp*(velocity(abs(y), yc, y_max, tau0, nc, g))/dz-2*k/dy)*T[19-i]+2*k/dy*T[20-i]+((tau0**.5+nc**.5*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001)**.5)**2)*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001))
          else:
              b.append(pd*cp*velocity(abs(y), yc, y_max, tau0, nc, g)/(dz)+2*k/dy)
              d.append(k/dy*T[18-i]+(-2*k/dy+pd*cp*(velocity(abs(y), yc, y_max, tau0, nc, g))/dz)*T[19-i]+k/dy*T[20-i]+((tau0**.5+nc**.5*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001)**.5)**2)*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001))
      for i in range(36):
          a.append(-k/(dy))
          c.append(-k/(dy))
      TD=TDMA(a,b,c,d)
      T=[TW]
      T.extend(TD)
      T.append(TW)

      T1.extend(T[:-19])

  return T1
        #yyy=np.arange(-1.9,2.0,0.1)
        #if j%40==0:
        #    plt.plot(yyy,T)
        #if j==0:
        #    plt.plot(yyy,T,"*", label="Entrance")
        

    #print("The distance to achieve the 'steady state' temperature is ", j*0.0001, "m or ", j*0.01, "cm")
        #plt.xlabel("y (mm)")
        #plt.ylabel("Temperature (K)")
    #plt.legend(title = 'Location',loc='upper right', bbox_to_anchor=(1.261, 1.02),prop={'size': 9})
    #plt.grid()
    #plt.show()
    #print(T)

temp(y_max,3000000,TW,nc,k,pd,cp,dz,dy,tau0,yc,1000)

T= temp(y_max,3000000,TW,nc,k,pd,cp,dz,dy,tau0,yc,1200)



T = np.reshape(np.array(T), (1200, 20))
r = np.linspace(0,1.9,20)
z = np.linspace(0,12,1200)
rr, zz = np.meshgrid(r,z)
f = plt.figure()
h = f.add_subplot(111, projection='3d')
h.set_zlim(403, 435)
h.zaxis.set_major_locator(LinearLocator(5))
h.zaxis.set_major_formatter(FormatStrFormatter('%.0f'))
h.set_xlim(1.9,0)
h.set_xlabel('y (mm)')
h.set_ylabel('z (cm)')
h.set_zlabel('T (Kelvin)')
plt.tick_params(axis='x', which='major', labelsize=8)
plt.tick_params(axis='y', which='major', labelsize=8)
plt.tick_params(axis='z', which='major', labelsize=9)
surf = h.plot_surface(rr, zz, np.fliplr(T), rstride=25, cstride=4, cmap=cm.jet, edgecolor='k', linewidth = 0.8)
f.colorbar(surf, shrink=0.5, aspect=5)
h.view_init(azim=300)

rrr = np.linspace(1.9,0,20)
plt.plot(rrr, T[35], label = 'z = 0.35 cm')
plt.plot(rrr, T[100], label = 'z = 1 cm')
plt.plot(rrr, T[300], label = 'z = 3 cm')
plt.plot(rrr, T[400], label = 'z = 4 cm')
plt.plot(rrr, T[800], label = 'z = 8 cm')
plt.legend(title = 'Location along z',bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xlabel('y (mm)')
plt.ylabel('Temperature (K)')
plt.grid()
plt.show()

T[0][1]



(T[][j]-T[i][j])/T[i][j]

total = []
for i in range(1200):
  a = []
  for j in range(19):
    s = (T[i][j+1]-T[i][j])/T[i][j]
    a.append(s)
    total.append(s)
    if (max(a)<0.00001):
      break
print(len(total)/20/1200)
print(total)

def temp(g,TW,TI,nc,k,pd,cp,dz,dy,tau0,z,r):
  y_max = r/1000
  yc = 0.0002
  T=[TW]
  T1 = []
  r = r*10
  r = int(r)
  rl = r - 1
  rl = int(rl)
  rlc = rl/10000
  nn = r*2-1
  nn = int(nn)
  for i in range(nn):
      T.append(TI)
  T.append(TW)
  #s=T[19]
  for j in range(z):
      a=[]
      b=[]
      c=[]
      d=[]
      for i in range(rl,-r,-1):
          y=np.float(i)/10000
          if y==rlc:   
              b.append(pd*cp*velocity(abs(y), yc, y_max, tau0, nc, g)/(dz)+2*k/dy)
              d.append(2*k/dy*T[rl-i]+(pd*cp*(velocity(abs(y), yc, y_max, tau0, nc, g))/dz-2*k/dy)*T[r-i]+k/dy*T[r+1-i]+((tau0**.5+nc**.5*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001)**.5)**2)*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001))
          elif y==-rlc:
              b.append(pd*cp*velocity(abs(y), yc, y_max, tau0, nc, g)/(dz)+2*k/dy)
              d.append(k/dy*T[rl-i]+(pd*cp*(velocity(abs(y), yc, y_max, tau0, nc, g))/dz-2*k/dy)*T[r-i]+2*k/dy*T[r+1-i]+((tau0**.5+nc**.5*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001)**.5)**2)*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001))
          else:
              b.append(pd*cp*velocity(abs(y), yc, y_max, tau0, nc, g)/(dz)+2*k/dy)
              d.append(k/dy*T[rl-i]+(-2*k/dy+pd*cp*(velocity(abs(y), yc, y_max, tau0, nc, g))/dz)*T[r-i]+k/dy*T[r+1-i]+((tau0**.5+nc**.5*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001)**.5)**2)*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001))
      for i in range(nn-1):
          a.append(-k/(dy))
          c.append(-k/(dy))
      TD=TDMA(a,b,c,d)
      T=[TW]
      T.extend(TD)
      T.append(TW)

      T1.extend(T[:-r])
  f = r*2+1-r
  f = int(f)
  r = r/10
  return T1,f,r

TT1,ff,r = temp(6000000,433.15,403.15,nc,k,pd,cp,dz,dy,tau0,20000,1.9)

TT1 = np.reshape(np.array(TT1), (20000, ff))
raxis = np.linspace(0,r,ff)
z = np.linspace(0,200,20000)
rr, zz = np.meshgrid(raxis,z)
f = plt.figure()
h = f.add_subplot(111, projection='3d')
h.set_zlim(403, 435)
h.zaxis.set_major_locator(LinearLocator(5))
h.zaxis.set_major_formatter(FormatStrFormatter('%.0f'))
h.set_xlim(r,0)
h.set_xlabel('y (mm)')
h.set_ylabel('z (cm)')
h.set_zlabel('T (Kelvin)')
plt.tick_params(axis='x', which='major', labelsize=8)
plt.tick_params(axis='y', which='major', labelsize=8)
plt.tick_params(axis='z', which='major', labelsize=9)
surf = h.plot_surface(rr, zz, np.fliplr(TT1), rstride=200, cstride=4, cmap=cm.jet, edgecolor='k', linewidth = 0.8)
f.colorbar(surf, shrink=0.5, aspect=5)
h.view_init(azim=300)

T = TT1
rrr = np.linspace(r,0,ff)
plt.plot(rrr, T[35], label = 'z = 0.35 cm')
plt.plot(rrr, T[300], label = 'z = 3 cm')
plt.plot(rrr, T[800], label = 'z = 8 cm')
plt.plot(rrr, T[1500], label = 'z = 15 cm')
plt.plot(rrr, T[2300], label = 'z = 23 cm')
plt.legend(title = 'Location along z',bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xlabel('y (mm)')
plt.ylabel('Temperature (K)')
plt.grid()
plt.show()

"""Parametric study"""

nc=100.24
k=0.15
pd=700
cp=1900
dz=0.0001
dy=2*0.0001**2
tau0=26260
tw=249470

def temp(g,TW,TI,nc,k,pd,cp,dz,dy,tau0,z,r):
  y_max = r/1000
  yc = 0.0002
  T=[TW]
  T1 = []
  r = r*10
  r = int(r)
  rl = r - 1
  rl = int(rl)
  rlc = rl/10000
  nn = r*2-1
  nn = int(nn)
  for i in range(nn):
      T.append(TI)
  T.append(TW)
  #s=T[19]
  for j in range(z):
      a=[]
      b=[]
      c=[]
      d=[]
      for i in range(rl,-r,-1):
          y=np.float(i)/10000
          if y==rlc:   
              b.append(pd*cp*velocity(abs(y), yc, y_max, tau0, nc, g)/(dz)+2*k/dy)
              d.append(2*k/dy*T[rl-i]+(pd*cp*(velocity(abs(y), yc, y_max, tau0, nc, g))/dz-2*k/dy)*T[r-i]+k/dy*T[r+1-i]+((tau0**.5+nc**.5*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001)**.5)**2)*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001))
          elif y==-rlc:
              b.append(pd*cp*velocity(abs(y), yc, y_max, tau0, nc, g)/(dz)+2*k/dy)
              d.append(k/dy*T[rl-i]+(pd*cp*(velocity(abs(y), yc, y_max, tau0, nc, g))/dz-2*k/dy)*T[r-i]+2*k/dy*T[r+1-i]+((tau0**.5+nc**.5*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001)**.5)**2)*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001))
          else:
              b.append(pd*cp*velocity(abs(y), yc, y_max, tau0, nc, g)/(dz)+2*k/dy)
              d.append(k/dy*T[rl-i]+(-2*k/dy+pd*cp*(velocity(abs(y), yc, y_max, tau0, nc, g))/dz)*T[r-i]+k/dy*T[r+1-i]+((tau0**.5+nc**.5*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001)**.5)**2)*((abs(velocity(abs(y-0.0001), yc, y_max, tau0, nc, g)-velocity(abs(y), yc, y_max, tau0, nc, g)))/0.0001))
      for i in range(nn-1):
          a.append(-k/(dy))
          c.append(-k/(dy))
      TD=TDMA(a,b,c,d)
      T=[TW]
      T.extend(TD)
      T.append(TW)

      T1.extend(T[:-r])
  f = r*2+1-r
  f = int(f)
  r = r/10
  return T1,f,r

def L_opt(g,TW,TI,z,r):
  TT1,ff,rmm = temp(g,TW,TI,nc,k,pd,cp,dz,dy,tau0,z,r)
  TT1 = np.reshape(np.array(TT1), (z, ff))
  total = []
  opt = z-2
  for i in range(z-1):
    a = []
    for j in range(ff):
      s = (TT1[i+1][j]-TT1[i][j])/TT1[i][j]
      a.append(s)
      total.append(s)
    if (max(a)<0.000001):
      opt = i+1
      break
  return opt/z

def parametric_curve(nn,TI,TW,g):
  r = []
  l = []
  for i in range(nn):
    R = 1.9+0.1*i
    #Rc = 0.00019+0.00001*i
    r.append(R)
    lll = L_opt(g,TW,TI,20000,R)
    l.append(lll)
  l = [200*x for x in l]
  print(r)
  print(l)
  plt.xlabel('y (mm)')
  plt.ylabel('$L_{req}$ (mm)')
  plt.plot(r,l)

def parametric_curves_Tinl(mm, TW):
  for i in range(mm):
    TI = 403.15 + 9*i
    parametric_curve(10,TI,TW,6000000)
  plt.grid()
  plt.show()

parametric_curves_Tinl(4, 433.15)

l1 = [29.94, 37.0, 45.08, 54.25, 64.53, 75.96000000000001, 88.53999999999999, 102.28999999999999, 117.19, 133.23000000000002]
l2 = [27.82, 34.25, 41.56, 49.81, 58.989999999999995, 69.13, 80.23, 92.25999999999999, 105.2, 119.02]
l3 = [24.54, 29.99, 36.13, 42.970000000000006, 50.51, 58.730000000000004, 67.61, 77.12, 87.22999999999999, 97.87]
l4 = [16.78, 20.06, 23.630000000000003, 27.49, 31.61, 35.97, 40.56, 45.35, 50.339999999999996, 55.510000000000005]
y = [1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8]
plt.plot(y,l1,label = '403.15 K')
plt.plot(y,l2,label = '412.15 K')
plt.plot(y,l3,label = '421.15 K')
plt.plot(y,l4,label = '430.15 K')
plt.xlabel('y (mm)')
plt.ylabel('$L_{req}$ (mm)')
plt.legend(title = 'Inlet temperature',loc = 'upper left')
plt.grid()
plt.show()

def parametric_curves_Tinf(mm, TI):
  for i in range(mm):
    TW = 433.15 + 9*i
    parametric_curve(10,TI,TW,6000000)
  plt.grid()
  plt.show()

parametric_curves_Tinf(4, 403.15)

l1 = [29.94, 37.0, 45.08, 54.25, 64.53, 75.96000000000001, 88.53999999999999, 102.28999999999999, 117.19, 133.23000000000002]
l2 = [31.380000000000003, 38.87, 47.48, 57.28, 68.31, 80.63, 94.25, 109.19000000000001, 125.46, 143.05]
l3 = [32.5, 40.33, 49.35, 59.64, 71.27, 84.28, 98.71, 114.6, 131.95, 150.78]
l4 = [33.410000000000004, 41.510000000000005, 50.870000000000005, 61.57, 73.67, 87.25, 102.35000000000001, 119.02, 137.26, 157.10999999999999]
y = [1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8]
plt.plot(y,l1,label = '433.15 K')
plt.plot(y,l2,label = '442.15 K')
plt.plot(y,l3,label = '451.15 K')
plt.plot(y,l4,label = '460.15 K')
plt.xlabel('y (mm)')
plt.ylabel('$L_{req}$ (mm)')
plt.legend(title = 'Wall temperature',loc = 'upper left')
plt.grid()
plt.show()

def parametric_curves_press(mm, TI,TW):
  for i in range(mm):
    g = 6000000 + 400000*i
    parametric_curve(10,TI,TW,g)
  plt.grid()
  plt.show()

parametric_curves_press(4, 403.15,433.15)

l1 = [29.94, 37.0, 45.08, 54.25, 64.53, 75.96000000000001, 88.53999999999999, 102.28999999999999, 117.19, 133.23000000000002]
l2 = [32.98, 40.69, 49.51, 59.48, 70.63000000000001, 83.00999999999999, 96.6, 111.41000000000001, 127.42999999999999, 144.63]
l3 = [36.09, 44.46, 54.010000000000005, 64.79, 76.82, 90.13, 104.72999999999999, 120.6, 137.72, 156.06]
l4 = [39.26, 48.3, 58.58, 70.17, 83.08, 97.33000000000001, 112.92, 129.83, 148.04, 167.5]
y = [1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8]
plt.plot(y,l1,label = '12 MPa')
plt.plot(y,l2,label = '12.8 MPa')
plt.plot(y,l3,label = '13.6 MPa')
plt.plot(y,l4,label = '14.4 MPa')
plt.xlabel('y (mm)')
plt.ylabel('$L_{req}$ (mm)')
plt.legend(title = 'Pressure drop',loc = 'upper left')
plt.grid()
plt.show()

